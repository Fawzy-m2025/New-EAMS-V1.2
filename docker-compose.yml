version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000/ws
    depends_on:
      - backend
    volumes:
      - ./src:/app/src
      - /app/node_modules
    networks:
      - eams-network

  # Backend Python API Services
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://eams_user:eams_password@postgres:5432/eams_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src/services/python:/app/services
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    networks:
      - eams-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=eams_db
      - POSTGRES_USER=eams_user
      - POSTGRES_PASSWORD=eams_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - eams-network
    restart: unless-stopped

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eams-network
    restart: unless-stopped

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: celery -A services.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://eams_user:eams_password@postgres:5432/eams_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src/services/python:/app/services
      - ./logs:/app/logs
    networks:
      - eams-network
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: celery -A services.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://eams_user:eams_password@postgres:5432/eams_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src/services/python:/app/services
      - ./logs:/app/logs
    networks:
      - eams-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - eams-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - eams-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:


networks:
  eams-network:
    driver: bridge
